{"version":3,"sources":["pages/HomePage/HomePage.styles.js","common/api.js","store/services/discover.js","utils/getCurrentDateString.js","components/SortedMovies/SortedMovies.styles.js","components/MovieCard/MovieCard.styles.js","utils/concatImageUrl.js","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.styles.js","components/MoviesList/MoviesList.jsx","components/Loader/Loader.jsx","components/ErrorWarning/ErrorWarning.jsx","components/SortedMovies/SortedMovies.jsx","fixtures/endpoints.js","styles/global.js","components/Header/Header.styles.jsx","components/Header/Header.jsx","pages/SearchPage/SearchPage.styles.js","components/SearchBar/SearchBar.styles.js","components/SearchBar/SearchBar.jsx","store/services/search.js","pages/MoviePage/MoviePage.styles.js","store/services/movies.js","utils/joinListOfNamedEntities.js","App.js","pages/HomePage/HomePage.jsx","pages/SearchPage/SearchPage.jsx","pages/MoviePage/MoviePage.jsx","utils/getBudgetWithCommas.js","store/index.js","styles/theme.js","index.js"],"names":["HomePageWrapper","styled","div","TMDB_API_KEY","discoverMoviesApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getSortedMovies","query","sortType","Date","toISOString","slice","useGetSortedMoviesQuery","SortedMoviesWrapper","MovieCardWrapper","CardImage","props","url","MovieTitle","p","concatImageUrl","imagePath","MovieCard","movie","to","id","className","poster_path","title","MoviesListWrapper","MoviesList","movies","templateColumns","map","item","Loader","ErrorWarning","SortedMovies","data","error","isLoading","results","discoverEndpoints","GlobalStyle","createGlobalStyle","Main","main","Section","section","HeaderWrapper","NavWrapper","NavLink","Link","Header","flexDirection","justify","height","align","SearchPageWrapper","SearchWrapper","SearchBar","handleChangeSearchInput","placeholder","onChange","autoFocus","searchMoviesApi","getFoundMovies","searchInput","useGetFoundMoviesQuery","MoviePageWrapper","MoviePoster","img","MovieDetailsWrapper","moviesInfoApi","getMovieInfo","movieId","useGetMovieInfoQuery","joinListOfNamedEntities","strings","name","join","routes","path","component","as","useState","setSearchInput","debouncedHandleChangeSearchInput","useCallback","debounce","e","target","value","useParams","postePath","story","overview","budget","toString","replace","genres","release","release_date","rating","vote_average","production","production_companies","src","margin","direction","fontSize","maxWidth","App","basename","process","exact","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","theme","extendTheme","styles","global","backgroundColor","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b72d09f.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const HomePageWrapper = styled.div`\n  padding: 40px;\n`;\n","export const TMDB_API_KEY = \"51b5c5a7855695fe863cb7f14eb5bdfe\"; // Я помню про .evn))\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { getCurrentDateString } from \"../../utils/getCurrentDateString\";\nimport { TMDB_API_KEY } from \"../../common/api\";\n\nexport const discoverMoviesApi = createApi({\n  reducerPath: \"discoverMoviesApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://api.themoviedb.org/3/discover/\",\n  }),\n  endpoints: (builder) => ({\n    getSortedMovies: builder.query({\n      query: (sortType) =>\n        `movie?api_key=${TMDB_API_KEY}&language=en-US&sort_by=${sortType}&release_date.lte=${getCurrentDateString()}&page=1`,\n    }),\n  }),\n});\n\nexport const { useGetSortedMoviesQuery } = discoverMoviesApi;\n","export const getCurrentDateString = () => {\n  return new Date().toISOString().slice(0, 10);\n};\n","import styled from \"styled-components\";\n\nexport const SortedMoviesWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import styled from \"styled-components\";\n\nexport const MovieCardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  height: 280px;\n  width: 200px;\n  margin-right: 20px;\n\n  .image-wrapper {\n    overflow: hidden;\n    position: relative;\n  }\n`;\n\nexport const CardImage = styled.div`\n  width: 100%;\n  height: 200px;\n  background-size: cover;\n  background-image: url(${(props) => {\n    return props.url;\n  }});\n  background-color: aliceblue;\n  background-position: center;\n\n  :hover {\n    transform: scale(1.1);\n    transition: all 0.5s ease-in;\n  }\n`;\n\nexport const MovieTitle = styled.p``;\n","const baseImageUrl = \"https://image.tmdb.org/t/p/w342\";\n\nexport const concatImageUrl = (imagePath) => {\n  return baseImageUrl + imagePath;\n};\n","import { CardImage, MovieCardWrapper, MovieTitle } from \"./MovieCard.styles\";\nimport { concatImageUrl } from \"../../utils/concatImageUrl\";\nimport { Link } from \"react-router-dom\";\n\nexport const MovieCard = ({ movie }) => {\n  return (\n    <MovieCardWrapper>\n      <Link to={`/movies/${movie.id}`}>\n        <div className=\"image-wrapper\">\n          <CardImage url={concatImageUrl(movie.poster_path)}></CardImage>\n        </div>\n        <MovieTitle to={`/movies/${movie.id}`}>{movie.title}</MovieTitle>\n      </Link>\n    </MovieCardWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const MoviesListWrapper = styled.div`\n  padding-top: 30px;\n`;\n","import { MovieCard } from \"../MovieCard/MovieCard\";\nimport { MoviesListWrapper } from \"./MoviesList.styles\";\nimport { Grid } from \"@chakra-ui/react\";\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <MoviesListWrapper>\n      <Grid templateColumns=\"repeat(4, 1fr)\">\n        {movies?.slice(0, 10).map((item) => (\n          <MovieCard key={item.id} movie={item} />\n        ))}\n      </Grid>\n    </MoviesListWrapper>\n  );\n};\n","export const Loader = () => {\n  return <p>Is loading...</p>;\n};\n","export const ErrorWarning = () => {\n  return <p>ERROR!</p>;\n};\n","import { useGetSortedMoviesQuery } from \"../../store/services/discover\";\nimport { SortedMoviesWrapper } from \"./SortedMovies.styles\";\nimport { MoviesList } from \"../MoviesList/MoviesList\";\nimport { Loader } from \"../Loader/Loader\";\nimport { ErrorWarning } from \"../ErrorWarning/ErrorWarning\";\n\nexport const SortedMovies = ({ sortType }) => {\n  const { data, error, isLoading } = useGetSortedMoviesQuery(sortType);\n\n  const movies = data && data.results.slice(0, 4);\n\n  if (error) {\n    return <ErrorWarning />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <SortedMoviesWrapper>\n      <MoviesList movies={movies} />\n    </SortedMoviesWrapper>\n  );\n};\n","export const discoverEndpoints = {\n  popular: \"popularity.desc\",\n  highestGrossing: \"revenue.desc\",\n  newest: \"primary_release_date.desc\",\n};\n","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n   body {\n    background-color: #000;\n   }\n`;\n\nexport const Main = styled.main`\n  font-family: \"Roboto\", sans-serif;\n  position: relative;\n  background-color: #000;\n  color: #fff;\n  padding-top: 70px;\n`;\n\nexport const Section = styled.section`\n  padding: 50px 30px;\n  overflow: hidden;\n`;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const HeaderWrapper = styled.div`\n  position: fixed;\n  background-color: #2c2c2f;\n  height: 70px;\n  z-index: 2;\n  width: 100%;\n`;\n\nexport const NavWrapper = styled.div`\n  height: 100%;\n`;\n\nexport const NavLink = styled(Link)`\n  padding: 20px 10px;\n  height: 100%;\n  width: 100%;\n  max-width: 80px;\n  text-align: center;\n\n  :hover {\n    background-color: #494949;\n  }\n\n  :active {\n    background-color: dimgray;\n  }\n`;\n","import { HeaderWrapper, NavWrapper, NavLink } from \"./Header.styles\";\nimport { Flex } from \"@chakra-ui/react\";\n\nexport const Header = () => {\n  return (\n    <HeaderWrapper>\n      <NavWrapper>\n        <Flex flexDirection=\"row\" justify=\"center\" height=\"100%\" align=\"center\">\n          <NavLink to=\"/\">Home</NavLink>\n          <NavLink to=\"/search\">Search</NavLink>\n        </Flex>\n      </NavWrapper>\n    </HeaderWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const SearchPageWrapper = styled.div``;\n","import styled from \"styled-components\";\n\nexport const SearchWrapper = styled.div`\n  max-width: 600px;\n  margin: auto;\n`;\n","import { SearchWrapper } from \"./SearchBar.styles\";\nimport { Input } from \"@chakra-ui/react\";\n\nexport const SearchBar = ({ handleChangeSearchInput }) => {\n  return (\n    <SearchWrapper>\n      <Input\n        placeholder=\"Start typing name of movie here...\"\n        onChange={handleChangeSearchInput}\n        autoFocus\n      />\n    </SearchWrapper>\n  );\n};\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { TMDB_API_KEY } from \"../../common/api\";\n\nexport const searchMoviesApi = createApi({\n  reducerPath: \"searchMoviesApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://api.themoviedb.org/3/search/\",\n  }),\n  endpoints: (builder) => ({\n    getFoundMovies: builder.query({\n      query: (searchInput) =>\n        `movie?api_key=${TMDB_API_KEY}&language=en-US&query=${searchInput}&page=1&include_adult=false`,\n    }),\n  }),\n});\n\nexport const { useGetFoundMoviesQuery } = searchMoviesApi;\n","import styled from \"styled-components\";\n\nexport const MoviePageWrapper = styled.div`\n  padding: 40px;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 300px;\n  height: 500px;\n`;\n\nexport const MovieDetailsWrapper = styled.div`\n  margin-left: 30px;\n`;\n","import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { TMDB_API_KEY } from \"../../common/api\";\n\nexport const moviesInfoApi = createApi({\n  reducerPath: \"moviesInfoApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://api.themoviedb.org/3/movie/\",\n  }),\n  endpoints: (builder) => ({\n    getMovieInfo: builder.query({\n      query: (movieId) => `${movieId}?api_key=${TMDB_API_KEY}&language=en-US`,\n    }),\n  }),\n});\n\nexport const { useGetMovieInfoQuery } = moviesInfoApi;\n","export const joinListOfNamedEntities = (strings) => {\n  return strings?.map((item) => item.name).join(\", \");\n};\n","import { HomePage } from \"./pages/HomePage/HomePage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Main } from \"./styles/global\";\nimport { Header } from \"./components/Header/Header\";\nimport { SearchPage } from \"./pages/SearchPage/SearchPage\";\nimport { MoviePage } from \"./pages/MoviePage/MoviePage\";\n\nconst routes = [\n  { path: \"/\", component: HomePage },\n  { path: \"/search/\", component: SearchPage },\n  { path: \"/movies/:id\", component: MoviePage },\n];\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Header />\n      <Main>\n        {routes.map(({ path, component }) => (\n          <Route exact path={path} component={component} key={path} />\n        ))}\n      </Main>\n    </Router>\n  );\n}\n\nexport default App;\n","import { HomePageWrapper } from \"./HomePage.styles\";\nimport { Heading } from \"@chakra-ui/react\";\nimport { SortedMovies } from \"../../components/SortedMovies/SortedMovies\";\nimport { discoverEndpoints } from \"../../fixtures/endpoints\";\nimport { Section } from \"../../styles/global\";\n\nexport const HomePage = () => {\n  return (\n    <HomePageWrapper>\n      <Section>\n        <Heading as=\"h2\">Newest Movies</Heading>\n        <SortedMovies sortType={discoverEndpoints.newest} />\n      </Section>\n      <Section>\n        <Heading as=\"h2\">Popular Movies</Heading>\n        <SortedMovies sortType={discoverEndpoints.popular} />\n      </Section>\n      <Section>\n        <Heading as=\"h2\">Highest Grossing Movies</Heading>\n        <SortedMovies sortType={discoverEndpoints.highestGrossing} />\n      </Section>\n    </HomePageWrapper>\n  );\n};\n","import { SearchPageWrapper } from \"./SearchPage.styles\";\nimport { SearchBar } from \"../../components/SearchBar/SearchBar\";\nimport { MoviesList } from \"../../components/MoviesList/MoviesList\";\nimport { useCallback, useState } from \"react\";\nimport debounce from \"lodash.debounce\";\nimport { useGetFoundMoviesQuery } from \"../../store/services/search\";\nimport { Section } from \"../../styles/global\";\nimport { ErrorWarning } from \"../../components/ErrorWarning/ErrorWarning\";\nimport { Loader } from \"../../components/Loader/Loader\";\n\nexport const SearchPage = () => {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const { data, error, isLoading } = useGetFoundMoviesQuery(searchInput);\n\n  const movies = data && data.results;\n\n  const handleChangeSearchInput = (e) => {\n    setSearchInput(e.target.value);\n  };\n\n  const debouncedHandleChangeSearchInput = useCallback(\n    debounce(handleChangeSearchInput, 500),\n    []\n  );\n\n  // Не понимаю как пофиксить, что useGetFoundMoviesQuery вызывается с пустой строкой\n  // и из-за пустой строки гет запрос приходит с ошибкой, поэтому сделал {error && searchInput && <ErrorWarning />}\n  return (\n    <SearchPageWrapper>\n      <Section>\n        <SearchBar handleChangeSearchInput={debouncedHandleChangeSearchInput} />\n      </Section>\n      {isLoading && <Loader />}\n      {error && searchInput && <ErrorWarning />}\n      <Section>\n        <MoviesList movies={movies} />\n      </Section>\n    </SearchPageWrapper>\n  );\n};\n","import {\n  MovieDetailsWrapper,\n  MoviePageWrapper,\n  MoviePoster,\n} from \"./MoviePage.styles\";\nimport { useParams } from \"react-router-dom\";\nimport { useGetMovieInfoQuery } from \"../../store/services/movies\";\nimport { Flex, Grid, Heading, Text } from \"@chakra-ui/react\";\nimport { concatImageUrl } from \"../../utils/concatImageUrl\";\nimport { joinListOfNamedEntities } from \"../../utils/joinListOfNamedEntities\";\nimport { ErrorWarning } from \"../../components/ErrorWarning/ErrorWarning\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport { getBudgetWithCommas } from \"../../utils/getBudgetWithCommas\";\n\nexport const MoviePage = () => {\n  const { id } = useParams();\n  const { data, error, isLoading } = useGetMovieInfoQuery(id);\n\n  const postePath = data && data.poster_path;\n  const title = data && data.title;\n  const story = data && data.overview;\n  const budget = data && getBudgetWithCommas(data.budget);\n  const genres = data && joinListOfNamedEntities(data.genres);\n  const release = data && data.release_date;\n  const rating = data && data.vote_average;\n  const production = data && joinListOfNamedEntities(data.production_companies);\n\n  if (error) {\n    return <ErrorWarning />;\n  }\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <MoviePageWrapper>\n      <Flex>\n        <MoviePoster src={concatImageUrl(postePath)} />\n        <MovieDetailsWrapper>\n          <Heading as=\"h2\">{title}</Heading>\n          <Flex margin=\"20px 0\" direction=\"column\">\n            <Text fontSize=\"25px\">Story</Text>\n            <Text>{story}</Text>\n          </Flex>\n          <Grid maxWidth=\"400px\" templateColumns=\"repeat(2, 1fr)\">\n            <Text>Budget</Text>\n            <Text>{budget}</Text>\n            <Text>Genres</Text>\n            <Text>{genres}</Text>\n            <Text>Release</Text>\n            <Text>{release}</Text>\n            <Text>Rating</Text>\n            <Text>{rating}</Text>\n            <Text>Production</Text>\n            <Text>{production}</Text>\n          </Grid>\n        </MovieDetailsWrapper>\n      </Flex>\n    </MoviePageWrapper>\n  );\n};\n","export const getBudgetWithCommas = (num) => {\n  return \"$\" + num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { discoverMoviesApi } from \"./services/discover\";\nimport { searchMoviesApi } from \"./services/search\";\nimport { moviesInfoApi } from \"./services/movies\";\n\nexport const store = configureStore({\n  reducer: {\n    [discoverMoviesApi.reducerPath]: discoverMoviesApi.reducer,\n    [searchMoviesApi.reducerPath]: searchMoviesApi.reducer,\n    [moviesInfoApi.reducerPath]: moviesInfoApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware()\n      .concat(discoverMoviesApi.middleware)\n      .concat(searchMoviesApi.middleware)\n      .concat(moviesInfoApi.middleware),\n});\n\nsetupListeners(store.dispatch);\n","import { extendTheme } from \"@chakra-ui/react\";\n\nexport const theme = extendTheme({\n  styles: {\n    global: {\n      \"html, body\": {\n        backgroundColor: \"black\",\n        color: \"white\",\n      },\n    },\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./styles/global\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { theme } from \"./styles/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <ChakraProvider theme={theme}>\n        <App />\n      </ChakraProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}